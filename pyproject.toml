[project]
name = "PyProBE-Data"
authors = [
  {name = "Thomas Holland"},
]
version = "2.2.0"
requires-python = ">=3.13,<3.14"
license = { file = "LICENSE" }
readme = {file = "README.md", content-type = "text/markdown"}
dependencies = [
    "distinctipy>=1.3.4",
    "fastexcel>=0.12.0",
    "ipykernel>=6.29.5",
    "loguru>=0.7.3",
    "joblib>=1.4.2",
    "matplotlib>=3.10.0",
    "numpy>=1.26.4",
    "pandas>=2.2.3",
    "plotly>=5.24.1",
    "polars>=1.18.0",
    "pydantic>=2.10.4",
    "pyyaml>=6.0.2",
    "scikit-learn>=1.6.0",
    "streamlit>=1.41.1",
    "sympy>=1.13.3",
]

classifiers = [
  "License :: OSI Approved :: BSD License",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

[project.urls]
Homepage = "https://github.com/ImperialCollegeLondon/PyProBE"
Documentation = "https://https://pyprobe.readthedocs.io/PyProBE/"
Repository = "https://github.com/ImperialCollegeLondon/PyProBE"
Releases = "https://github.com/ImperialCollegeLondon/PyProBE/releases"
Changelog = "https://github.com/ImperialCollegeLondon/PyProBE/blob/main/CHANGELOG.md"

[project.optional-dependencies]
hvplot = [
    "hvplot>=0.11.2",
]
seaborn = [
    "seaborn>=0.13.2",
]
dev = [
    "pre-commit>=4.0.1",
    "python-semantic-release>=9.15.2",
    "nbmake>=1.5.5",
    "pytest>=8.3.4",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "xlsxwriter>=3.2.0",
    "pytest-xdist>=3.6.1",
]
docs = [
    "myst-nb>=1.2.0",
    "pydata-sphinx-theme>=0.16.1",
    "sphinx>=7.2.6",
    "sphinx-design>=0.6.1",
    "sphinx-tabs>=3.4.7",
    "sphinxcontrib-bibtex>=2.6.3",
]
pybamm = [
    "pybamm[cite]>=25.1.1",
]

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.build]
packages = ["pyprobe"]
exclude = [
    "htmlcov/*",
    "tests/*",
    "docs/*",
    "examples/*"
]

[tool.semantic_release]
version_source = "tag"
version_toml = ["pyproject.toml:project.version"]
changelog_file = false
branch = "main" 
commit_version_number = false  # disable auto commits
tag_commit = false            # disable auto tagging
prerelease = true
upload_to_pypi = false        # disable PyPI upload
upload_to_release = false     # disable GitHub release creation

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins: Check for Python builtins being used as variables or parameters
    "D",    # flake8-docstrings: Check docstrings
    "I",    # isort: Check and enforce import ordering
    "TID",  # flake8-tidy-imports
    "SLF001",  # private-member-access: Checks for accesses on "private" class members.
    "F",   # pyflakes: Check for errors in Python code
    "E",   # pycodestyle: Check for PEP 8 violations
    "W",   # pycodestyle: Check for PEP 8 warnings
    "ISC", # flake8-implicit-str-concat: Check for implicit string concatenation
    "UP",  # pyupgrade: Check for outdated Python syntax
    "T20", # flake8-print: Check for print statements
    "N",  # pep8-naming: Check for naming conventions
    "ANN", # flake8-annotations: Check for missing type annotations
    "COM", # flake8-commas: Check for missing trailing commas
    "C4", # flake8-comprehensions: Check list comprehensions
    "NPY", # numpy: Check numpy issues
    "ERA", # check for commented out code
    "SIM" # flake8-simplify: Check for simplifications
]
ignore = ["ANN401", "COM812", "ISC001"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"docs/source/conf.py" = ["A"]
"tests/*" = ["SLF001", "N", "B", "ANN"]
"docs/source/examples/*" = ["D103", "T20", "N", "ANN"]
"pyprobe/analysis/degradation_mode_analysis.py" = ["N"]
"pyprobe/analysis/base/degradation_mode_analysis_functions.py" = ["N"]

[tool.mypy]
disallow_any_explicit = false
disallow_any_generics = true
warn_unreachable = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [".venv/", "docs/"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "polars"
follow_imports = "skip"

[[tool.mypy.overrides]]
module = "deprecated.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = "tests/"
addopts = "-v -p no:warnings --doctest-modules --benchmark-disable"

[tool.coverage.report]
exclude_also = [
    "@overload"
]
